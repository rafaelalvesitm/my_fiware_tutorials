# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#
# OBS: Este documento é uma modificação do documento origial providenciado pela fundação FIWARE. 
# OBS: Tome bastante cuidado com a identação. O arquivo YAML é sensível a identação.

version: "3.8" # Versão do docker-compose
services:

  # Orion Context Broker é o principal componente do FIWARE. Ele é responsável por armazenar e gerenciar as entidades.
  orion:
    image: fiware/orion:3.7.0 # Carrega a imagem do Orion Context Broker do Docker Hub
    hostname: orion # Cria um hostname para ser mais fácil encontrar o container na rede
    container_name: fiware-orion # Cria um nome para o container para ser mais fácil obter informações sobre ele
    depends_on:
      - mongo-db # Dependente do banco de dados Mongo DB, só inicia quando o banco de dados estiver pronto
    networks:
      - default # Usa uma rede local chamada default
    ports:
      - "1026:1026" # Mapeia a porta 1026 da máquina para a porta 1026 do container
    command: -dbhost mongo-db -logLevel DEBUG -noCache # Comando para iniciar o Orion Context Broker
    healthcheck: # Verifica se o Orion Context Broker está saudável
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 10s # Intervalo de tempo para verificar a saúde do Orion Context Broker


  # Mongo DB é o banco de dados utilizado pelo Orion Context Broker para armazenar as entidades
  mongo-db:
    image: mongo:4.4 # Carrega a imagem do Mongo DB do Docker Hub
    hostname: mongo-db # Cria um hostname para ser mais fácil encontrar o container na rede
    container_name: db-mongo # Cria um nome para o container para ser mais fácil obter informações sobre ele
    expose:
      - "27017" # Expõe a porta 27017 do container
    ports:
      - "27017:27017" # Mapeia a porta 27017 da máquina para a porta 27017 do container
    networks:
      - default # Usa uma rede local chamada default
    volumes: # Cria um volume para persistir os dados no banco de dados
      - mongo-db:/data
    healthcheck: # Verifica se o Mongo DB está saudável
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s # Intervalo de tempo para verificar a saúde do Mongo DB
    

networks: # Cria uma rede local chamada default
  default: # Nome da rede local
    driver: bridge # Tipo de driver da rede local
volumes: # Cria um volume para persistir os dados no banco de dados, caso o container seja removido ou reiniciado os dados não serão perdidos. 
  mongo-db: ~