{
	"info": {
		"_postman_id": "89ee32c1-489a-46a8-b4d5-952e17c744ae",
		"name": "tutorial7",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7883325"
	},
	"item": [
		{
			"name": "IoT Agent - Obtain Version Information",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4042/iot/about",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4042",
					"path": [
						"iot",
						"about"
					]
				},
				"description": "Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary."
			},
			"response": []
		},
		{
			"name": "IoT Agent - Create a Service Group Copy",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"services\": [\n        {\n            \"apikey\": \"4jggokgpepnvsb2uv4s40d59ov\",\n            \"cbroker\": \"http://orion:1026\",\n            \"entity_type\": \"Device\",\n            \"resource\": \"\"\n        }\n    ]\n}"
				},
				"url": {
					"raw": "http://localhost:4042/iot/services",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4042",
					"path": [
						"iot",
						"services"
					]
				},
				"description": "Invoking group provision is always the the first step in connecting devices. For MQTT communication, provisioning supplies the authentication key so the IoT Agent will know which **topic** it must\nsubscribe to.\n\nIt is possible to set up default commands and attributes for all devices as well, but this\nis not done within this tutorial as we will be provisioning each device separately.\n\nThis example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices\nwill be communicating by sending messages to the `/4jggokgpepnvsb2uv4s40d59ov` **topic**\n\nThe `resource` attribute is left blank since HTTP communication is not being used."
			},
			"response": []
		},
		{
			"name": "Provision a device",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "fiware-service",
						"value": "openiot",
						"type": "text"
					},
					{
						"key": "fiware-servicepath",
						"value": "/",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"devices\": [\r\n        {\r\n            \"device_id\": \"device001\",\r\n            \"entity_name\": \"urn:ngsi-ld:Device:001\",\r\n            \"entity_type\": \"Device\",\r\n            \"protocol\": \"PDI-IoTA-UltraLight\",\r\n            \"transport\": \"MQTT\",\r\n            \"attributes\": [\r\n                {\r\n                    \"object_id\": \"t\",\r\n                    \"name\": \"temperature\",\r\n                    \"type\": \"Number\"\r\n                },\r\n                {\r\n                    \"object_id\": \"rh\",\r\n                    \"name\": \"relativeHumidity\",\r\n                    \"type\": \"Number\"\r\n                }\r\n            ],\r\n            \"commands\": [\r\n                {\r\n                    \"name\": \"switch\",\r\n                    \"type\": \"command\"\r\n                },\r\n                {\r\n                    \"name\": \"interval\",\r\n                    \"type\": \"command\"\r\n                }\r\n            ],\r\n            \"static_attributes\": [\r\n                {\r\n                    \"name\": \"refStore\",\r\n                    \"type\": \"Relationship\",\r\n                    \"value\": \"urn:ngsi-ld:Store:001\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4042/iot/devices",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4042",
					"path": [
						"iot",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Device 1",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot",
						"type": "text"
					},
					{
						"key": "fiware-servicepath",
						"value": "/",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:1026/v2/entities/urn:ngsi-ld:Device:001?type=Device&options=keyValues",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1026",
					"path": [
						"v2",
						"entities",
						"urn:ngsi-ld:Device:001"
					],
					"query": [
						{
							"key": "type",
							"value": "Device"
						},
						{
							"key": "options",
							"value": "keyValues"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Swicth Command via Orion",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot",
						"type": "text"
					},
					{
						"key": "fiware-servicepath",
						"value": "/",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"switch\": {\r\n        \"type\": \"command\",\r\n        \"value\": \"1\"     \r\n    }\r\n}"
				},
				"url": {
					"raw": "http://localhost:1026/v2/entities/urn:ngsi-ld:Device:001/attrs?type=Device",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1026",
					"path": [
						"v2",
						"entities",
						"urn:ngsi-ld:Device:001",
						"attrs"
					],
					"query": [
						{
							"key": "type",
							"value": "Device"
						}
					]
				}
			},
			"response": []
		}
	]
}